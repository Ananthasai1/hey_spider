# ============================================
# scripts/check_requirements.py - CHANGE #10: System Requirements Checker
# Priority: üü¢ NICE-TO-HAVE
# NEW FILE - Create this file
# ============================================

#!/usr/bin/env python3
"""
System Requirements Checker
Verifies all dependencies and hardware for Hey Spider Robot
"""

import sys
import subprocess
import os
from pathlib import Path


def print_header(text: str):
    """Print section header"""
    print("\n" + "="*60)
    print(f"  {text}")
    print("="*60)


def check_python_version():
    """Check Python version"""
    print("\nüìç Checking Python version...")
    
    major, minor = sys.version_info.major, sys.version_info.minor
    
    if (major, minor) >= (3, 7):
        print(f"   ‚úÖ Python {major}.{minor} (OK)")
        return True
    else:
        print(f"   ‚ùå Python {major}.{minor} (Need 3.7+)")
        return False


def check_package(package_name: str, import_name: str = None) -> bool:
    """Check if a Python package is installed"""
    if import_name is None:
        import_name = package_name.replace('-', '_')
    
    try:
        __import__(import_name)
        print(f"   ‚úÖ {package_name}")
        return True
    except ImportError:
        print(f"   ‚ùå {package_name} - NOT INSTALLED")
        return False


def check_packages():
    """Check required Python packages"""
    print("\nüì¶ Checking Python packages...")
    
    packages = [
        # Core framework
        ('flask', 'flask'),
        ('flask-socketio', 'flask_socketio'),
        ('python-socketio', 'socketio'),
        
        # Computer Vision
        ('opencv-python', 'cv2'),
        ('Pillow', 'PIL'),
        ('numpy', 'numpy'),
        
        # Object Detection
        ('ultralytics', 'ultralytics'),
        ('torch', 'torch'),
        
        # Raspberry Pi Hardware
        ('adafruit-circuitpython-servokit', 'adafruit_servokit'),
        ('adafruit-circuitpython-ssd1306', 'adafruit_ssd1306'),
        
        # AI
        ('openai', 'openai'),
        ('requests', 'requests'),
        
        # Utilities
        ('python-dotenv', 'dotenv'),
        ('pyyaml', 'yaml'),
    ]
    
    results = []
    for package_name, import_name in packages:
        results.append(check_package(package_name, import_name))
    
    return all(results)


def check_optional_packages():
    """Check optional Python packages"""
    print("\nüì¶ Checking optional packages...")
    
    optional = [
        ('speech-recognition', 'speech_recognition'),
        ('pyaudio', 'pyaudio'),
        ('psutil', 'psutil'),
        ('pytest', 'pytest'),
    ]
    
    for package_name, import_name in optional:
        check_package(package_name, import_name)


def check_hardware():
    """Check hardware availability"""
    print("\nüîß Checking hardware...")
    
    results = []
    
    # Check I2C
    print("\n   I2C Bus:")
    try:
        result = subprocess.run(
            ['i2cdetect', '-y', '1'],
            capture_output=True,
            timeout=2,
            text=True
        )
        if result.returncode == 0:
            print("      ‚úÖ I2C tools available")
            
            # Check for devices
            output = result.stdout
            if '40' in output:
                print("      ‚úÖ PCA9685 detected at 0x40 (Servo Controller)")
            else:
                print("      ‚ö†Ô∏è  PCA9685 not detected at 0x40")
            
            if '3c' in output.lower():
                print("      ‚úÖ SSD1306 detected at 0x3C (OLED Display)")
            else:
                print("      ‚ö†Ô∏è  SSD1306 not detected at 0x3C")
            
            results.append(True)
        else:
            print("      ‚ùå I2C not available")
            results.append(False)
    except FileNotFoundError:
        print("      ‚ö†Ô∏è  i2cdetect not installed (install: sudo apt-get install i2c-tools)")
        results.append(False)
    except Exception as e:
        print(f"      ‚ùå Error: {e}")
        results.append(False)
    
    # Check Camera
    print("\n   Camera:")
    try:
        result = subprocess.run(
            ['vcgencmd', 'get_camera'],
            capture_output=True,
            timeout=2,
            text=True
        )
        if b'detected=1' in result.stdout.encode() or 'detected=1' in result.stdout:
            print("      ‚úÖ Camera detected")
            results.append(True)
        else:
            print("      ‚ö†Ô∏è  Camera not detected")
            print("      üí° Enable: sudo raspi-config -> Interface Options -> Camera")
            results.append(False)
    except FileNotFoundError:
        print("      ‚ö†Ô∏è  vcgencmd not found (not on Raspberry Pi)")
        results.append(False)
    except Exception as e:
        print(f"      ‚ùå Error: {e}")
        results.append(False)
    
    # Check GPIO
    print("\n   GPIO:")
    try:
        import RPi.GPIO as GPIO
        print(f"      ‚úÖ RPi.GPIO available (version {GPIO.VERSION})")
        results.append(True)
    except ImportError:
        print("      ‚ö†Ô∏è  RPi.GPIO not available (expected on non-Pi systems)")
        results.append(False)
    
    return any(results)  # At least one hardware check should pass


def check_system_info():
    """Check system information"""
    print("\nüíª System Information:")
    
    # OS Info
    try:
        with open('/etc/os-release', 'r') as f:
            for line in f:
                if line.startswith('PRETTY_NAME'):
                    os_name = line.split('=')[1].strip().strip('"')
                    print(f"   OS: {os_name}")
                    break
    except:
        print(f"   OS: {os.name}")
    
    # Python info
    print(f"   Python: {sys.version.split()[0]}")
    print(f"   Python Path: {sys.executable}")
    
    # Memory
    try:
        import psutil
        mem = psutil.virtual_memory()
        print(f"   Memory: {mem.total / 1024**3:.1f} GB total, "
              f"{mem.available / 1024**3:.1f} GB available")
    except ImportError:
        pass
    
    # Disk space
    try:
        import shutil
        total, used, free = shutil.disk_usage("/")
        print(f"   Disk: {free / 1024**3:.1f} GB free of {total / 1024**3:.1f} GB")
    except:
        pass


def check_project_structure():
    """Check project directory structure"""
    print("\nüìÅ Checking project structure...")
    
    required_dirs = [
        'config',
        'src',
        'scripts',
        'images',
        'logs',
        'models',
        'data',
    ]
    
    required_files = [
        'main.py',
        'requirements.txt',
        '.env.example',
        'README.md',
    ]
    
    all_good = True
    
    for directory in required_dirs:
        path = Path(directory)
        if path.exists() and path.is_dir():
            print(f"   ‚úÖ {directory}/")
        else:
            print(f"   ‚ùå {directory}/ - MISSING")
            all_good = False
    
    for file in required_files:
        path = Path(file)
        if path.exists() and path.is_file():
            print(f"   ‚úÖ {file}")
        else:
            print(f"   ‚ùå {file} - MISSING")
            all_good = False
    
    return all_good


def check_environment():
    """Check environment configuration"""
    print("\nüîê Checking environment...")
    
    env_file = Path('.env')
    
    if env_file.exists():
        print("   ‚úÖ .env file exists")
        
        # Check for API key
        with open(env_file, 'r') as f:
            content = f.read()
            
            if 'OPENAI_API_KEY=sk-' in content:
                print("   ‚úÖ OpenAI API key configured")
            elif 'OPENAI_API_KEY=' in content:
                print("   ‚ö†Ô∏è  OpenAI API key present but may be invalid")
            else:
                print("   ‚ö†Ô∏è  OpenAI API key not set")
        
        return True
    else:
        print("   ‚ö†Ô∏è  .env file not found")
        print("   üí° Run: cp .env.example .env")
        print("   üí° Or run: make setup")
        return False


def check_yolo_model():
    """Check if YOLO model is available"""
    print("\nü§ñ Checking YOLO model...")
    
    model_locations = [
        Path('yolov8n.pt'),
        Path('models/yolov8n.pt'),
        Path.home() / '.cache' / 'torch' / 'hub' / 'checkpoints' / 'yolov8n.pt',
    ]
    
    for location in model_locations:
        if location.exists():
            size_mb = location.stat().st_size / 1024 / 1024
            print(f"   ‚úÖ Model found: {location} ({size_mb:.1f} MB)")
            return True
    
    print("   ‚ö†Ô∏è  YOLO model not found")
    print("   üí° Model will be downloaded automatically on first run")
    print("   üí° Or download manually from:")
    print("      https://github.com/ultralytics/assets/releases/download/v0.0.0/yolov8n.pt")
    return False


def check_permissions():
    """Check file permissions"""
    print("\nüîê Checking permissions...")
    
    # Check if user is in required groups
    try:
        import grp
        import pwd
        
        username = pwd.getpwuid(os.getuid()).pw_name
        user_groups = [g.gr_name for g in grp.getgrall() if username in g.gr_mem]
        
        required_groups = ['gpio', 'i2c', 'spi']
        
        for group in required_groups:
            if group in user_groups:
                print(f"   ‚úÖ User in '{group}' group")
            else:
                print(f"   ‚ö†Ô∏è  User NOT in '{group}' group")
                print(f"      Add with: sudo usermod -a -G {group} {username}")
        
    except Exception as e:
        print(f"   ‚ö†Ô∏è  Cannot check groups: {e}")


def print_install_instructions():
    """Print installation instructions for missing packages"""
    print("\n" + "="*60)
    print("üì¶ INSTALLATION INSTRUCTIONS")
    print("="*60)
    print("\nTo install missing packages:")
    print("\n1. Install system dependencies:")
    print("   sudo apt-get update")
    print("   sudo apt-get install -y python3-pip i2c-tools")
    print("\n2. Install Python packages:")
    print("   pip install -r requirements.txt")
    print("\n3. Or use the install script:")
    print("   bash install.sh")
    print("\n4. Or use make:")
    print("   make install")


def print_troubleshooting():
    """Print troubleshooting tips"""
    print("\n" + "="*60)
    print("üîß TROUBLESHOOTING TIPS")
    print("="*60)
    print("\nIf hardware is not detected:")
    print("  ‚Ä¢ Enable I2C: sudo raspi-config -> Interface Options -> I2C")
    print("  ‚Ä¢ Enable Camera: sudo raspi-config -> Interface Options -> Camera")
    print("  ‚Ä¢ Reboot after enabling: sudo reboot")
    print("  ‚Ä¢ Check connections and power supply")
    print("\nIf packages fail to import:")
    print("  ‚Ä¢ Activate virtual environment: source venv/bin/activate")
    print("  ‚Ä¢ Reinstall packages: pip install -r requirements.txt --force-reinstall")
    print("\nFor permission issues:")
    print("  ‚Ä¢ Add user to groups: sudo usermod -a -G gpio,i2c,spi $USER")
    print("  ‚Ä¢ Log out and back in for groups to take effect")


def main():
    """Main requirements checker"""
    print("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë  üï∑Ô∏è  HEY SPIDER ROBOT - REQUIREMENTS CHECKER            ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")
    
    results = {
        'python': False,
        'packages': False,
        'hardware': False,
        'structure': False,
        'environment': False,
    }
    
    # Run checks
    print_header("PYTHON VERSION")
    results['python'] = check_python_version()
    
    print_header("REQUIRED PACKAGES")
    results['packages'] = check_packages()
    
    print_header("OPTIONAL PACKAGES")
    check_optional_packages()
    
    print_header("HARDWARE")
    results['hardware'] = check_hardware()
    
    print_header("PROJECT STRUCTURE")
    results['structure'] = check_project_structure()
    
    print_header("ENVIRONMENT CONFIGURATION")
    results['environment'] = check_environment()
    
    print_header("YOLO MODEL")
    check_yolo_model()
    
    print_header("SYSTEM INFORMATION")
    check_system_info()
    
    print_header("PERMISSIONS")
    check_permissions()
    
    # Summary
    print("\n" + "="*60)
    print("üìä REQUIREMENTS SUMMARY")
    print("="*60)
    
    status_emoji = {True: "‚úÖ", False: "‚ùå"}
    
    print(f"\n{status_emoji[results['python']]} Python Version")
    print(f"{status_emoji[results['packages']]} Required Packages")
    print(f"{status_emoji[results['hardware']]} Hardware (‚ö†Ô∏è  optional for development)")
    print(f"{status_emoji[results['structure']]} Project Structure")
    print(f"{status_emoji[results['environment']]} Environment Config")
    
    # Determine overall status
    critical_checks = [results['python'], results['packages'], results['structure']]
    all_critical_passed = all(critical_checks)
    
    print("\n" + "="*60)
    
    if all_critical_passed:
        print("‚úÖ ALL CRITICAL REQUIREMENTS MET!")
        print("="*60)
        print("\nüöÄ You're ready to run the robot!")
        print("\nNext steps:")
        print("  1. Configure: make setup  (or edit .env)")
        print("  2. Calibrate: make calibrate")
        print("  3. Run: make run")
        print("\n")
        return 0
    else:
        print("‚ùå SOME REQUIREMENTS NOT MET")
        print("="*60)
        
        if not results['packages']:
            print_install_instructions()
        
        print_troubleshooting()
        print("\n")
        return 1


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Check cancelled by user")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error during check: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)